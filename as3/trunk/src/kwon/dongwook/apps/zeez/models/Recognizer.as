package kwon.dongwook.apps.zeez.models {		import __AS3__.vec.Vector;		public class Recognizer {		public var cases:Vector.<Case>;				public function classify(char:Character, candidate:uint = 10):Vector.<Result> {			var count:uint = cases.length;			var resultsHolder:Vector.<Result> = new Vector.<Result>();			var builder:FeatureBuilder = new FeatureBuilder();						if (!builder.read(char))				return resultsHolder;						for each(var study:Case in cases) {				resultsHolder.push(new Result(											study.bias + dot(study.features, builder.features),											study.character));			}						return resultsHolder.sort(function(r1:Result, r2:Result):Number {				return (r2.score * 100000) - (r1.score * 100000);			}).slice(0, Math.min(candidate, resultsHolder.length));		}				private function dot(f1:Vector.<Feature>, f2:Vector.<Feature>):Number {			var sum:Number = 0;			var count1:uint = 0;			var count2:uint = 0;			while (f1[count1].index >= 0 && f2[count2].index >=0) {				if (f1[count1].index == f2[count2].index) {					sum += (f1[count1].value * f2[count2].value);					count1++;					count2++;				} else if (f1[count1].index < f2[count2].index) {					count1++;				} else {					count2++;				}				if (count1 >= f1.length || count2 >= f2.length)					break;			}			return sum;		}	}}